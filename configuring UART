#include <pic.h> 
#include "UART.h"

char UART_Init(const long int baudrate)
{
  unsigned int x;
  x = (_XTAL_FREQ - baudrate*64)/(baudrate*64); //SPBRG for Low Baud Rate
  if(x>255) //If High Baud Rate required
  {
    x = (_XTAL_FREQ - baudrate*16)/(baudrate*16); //SPBRG for High Baud Rate
    BRGH = 1; //Setting High Baud Rate
  }
  if(x<256)
  {
    SPBRG = x; //Writing SPBRG register
    SYNC = 0; //Selecting Asynchronous Mode
    SPEN = 1; //Enables Serial Port
    TRISC7 = 1;  
    TRISC6 = 0; 
    CREN = 0; //Enables Continuous Reception
    TXEN = 1; //Enables Transmissio
    RCIE  = 0;		
    TXIE=0;				
    return 1;
  }
  return 0;
}


char UART_TX_Empty()
{
  return TRMT; //Returns Transmit Shift Status bit
}


void UART_Write_Text(const unsigned char *text)
{
  int i;
  for(i=0;text[i]!='\0';i++)
    UART_Write(text[i]);
}


void UART_Write(unsigned char data)
{
  while(!TRMT); //Waiting for Previous Data to Transmit completly
  TXREG = data; //Writing data to Transmit Register, Starts transmission
}


char UART_Data_Ready()
{
  return RCIF;
}

char UART_Read()
{
  while(!RCIF); //Waits for Reception to complete
  return RCREG; //Returns the 8 bit data
}


void UART_Read_Text(unsigned char *Output, unsigned int length)
{
  int i;
  for(int i=0;i<length;i++)
    Output[i] = UART_Read();
}


void UART_value(signed int value)
{
	if(value >= 0 && value <= 9)
	{
		UART_Write(value + 48);
	}
	if(value >= 10 && value <= 99)
	{
		UART_Write((value / 10) + 48);
		__delay_ms(1);
		UART_Write((value % 10) + 48);	
	}
	if(value >= 100 && value <= 999)
	{	
		
		UART_Write(((value / 10) / 10) + 48);
		__delay_ms(1);
		UART_Write(((value / 10) % 10) + 48);
		__delay_ms(1);
		UART_Write((value % 10) + 48);
	}
	if(value >= 1000 &&value <= 9999)
	{
		UART_Write(((value / 100) / 10) + 48);
		__delay_ms(1);
		UART_Write(((value / 100) % 10) + 48);
		__delay_ms(1);
		UART_Write(((value% 100) / 10) + 48);
		__delay_ms(1);
		UART_Write((value % 10) +48);
	}
                }
